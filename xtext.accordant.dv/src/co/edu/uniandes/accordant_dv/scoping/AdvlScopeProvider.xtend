/*
 * generated by Xtext 2.12.0
 */
package co.edu.uniandes.accordant_dv.scoping

import org.eclipse.emf.ecore.EReference
import co.edu.uniandes.accordant_dv.DeploymentView
import co.edu.uniandes.accordant_dv.Accordant_dvPackage

//import co.edu.uniandes.accordant_fv.FunctionalView
//import co.edu.uniandes.accordant_fv.Component
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.emf.ecore.EObject
import co.edu.uniandes.accordant_dv.Artifact
import org.eclipse.xtext.scoping.Scopes
import co.edu.uniandes.accordant_dv.ExecEnvironment
import co.edu.uniandes.accordant_rq.InputPackage
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.naming.QualifiedName;
import co.edu.uniandes.accordant_rq.SensitivityPoint
import co.edu.uniandes.accordant_dv.Deployment
import co.edu.uniandes.accordant_fv.Component
import co.edu.uniandes.accordant_fv.Connector

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AdvlScopeProvider extends AbstractAdvlScopeProvider {

	override getScope(EObject context, EReference reference) {
		if (context instanceof Deployment && reference == Accordant_dvPackage.Literals.DEPLOYMENT__SPOINT) {
			val rootElement = EcoreUtil2.getContainerOfType(context, DeploymentView)
			val pointList = <SensitivityPoint>newArrayList
			val importedPackage = rootElement?.ipackage
			if (importedPackage !== null) {
				for (points : importedPackage.analyzedQs.map[SPoints]) {
					pointList += points
				}
			}
			return Scopes.scopeFor(pointList)
		} else if (context instanceof Artifact) {
			val rootElement = EcoreUtil2.getContainerOfType(context, DeploymentView)
			if (reference == Accordant_dvPackage.Literals.ARTIFACT__COMP) {
				val compList = <Component>newArrayList
				val fview = rootElement?.fv
				if (fview !== null) {
					for (comp : fview.comps) {
						compList += comp
					}
				}
				return Scopes.scopeFor(compList)
			} else if (reference == Accordant_dvPackage.Literals.ARTIFACT__CONN) {
				val connList = <Connector>newArrayList
				val fview = rootElement?.fv
				if (fview !== null) {
					for (conn : fview.conns) {
						connList += conn
					}
				}
				return Scopes.scopeFor(connList)
			} else if (reference == Accordant_dvPackage.Literals.ARTIFACT__SPOINT) {
				val pointList = <SensitivityPoint>newArrayList
				val importedPackage = rootElement?.ipackage
				if (importedPackage !== null) {
					for (points : importedPackage.analyzedQs.map[SPoints]) {
						pointList += points
					}
				}
				return Scopes.scopeFor(pointList)
			}
		}
		return super.getScope(context, reference);
	}

}
