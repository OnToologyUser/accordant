/*
 * generated by Xtext 2.12.0
 */
package co.edu.uniandes.accordant_rq.serializer;

import co.edu.uniandes.accordant_rq.Accordant_rqPackage;
import co.edu.uniandes.accordant_rq.AnalyzedQS;
import co.edu.uniandes.accordant_rq.InputPackage;
import co.edu.uniandes.accordant_rq.QScenario;
import co.edu.uniandes.accordant_rq.SensitivityPoint;
import co.edu.uniandes.accordant_rq.Tactic;
import co.edu.uniandes.accordant_rq.services.AinlGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AinlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AinlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Accordant_rqPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Accordant_rqPackage.ANALYZED_QS:
				sequence_AnalyzedQS(context, (AnalyzedQS) semanticObject); 
				return; 
			case Accordant_rqPackage.INPUT_PACKAGE:
				sequence_InputPackage(context, (InputPackage) semanticObject); 
				return; 
			case Accordant_rqPackage.QSCENARIO:
				sequence_QScenario(context, (QScenario) semanticObject); 
				return; 
			case Accordant_rqPackage.SENSITIVITY_POINT:
				sequence_SensitivityPoint(context, (SensitivityPoint) semanticObject); 
				return; 
			case Accordant_rqPackage.TACTIC:
				sequence_Tactic(context, (Tactic) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AnalyzedQS returns AnalyzedQS
	 *
	 * Constraint:
	 *     (reasoning=EString? qs=[QScenario|EString] points=SensitivityPoint?)
	 */
	protected void sequence_AnalyzedQS(ISerializationContext context, AnalyzedQS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InputPackage returns InputPackage
	 *
	 * Constraint:
	 *     (name=EString scenarios+=QScenario scenarios+=QScenario* gtactics+=Tactic gtactics+=Tactic*)
	 */
	protected void sequence_InputPackage(ISerializationContext context, InputPackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QScenario returns QScenario
	 *
	 * Constraint:
	 *     (
	 *         qAttribute=QAttribute 
	 *         measure=QAMetric 
	 *         minValue=EFloat 
	 *         maxValue=EFloat 
	 *         unit=MetricUnit 
	 *         stimulus=EString 
	 *         environment=EString
	 *     )
	 */
	protected void sequence_QScenario(ISerializationContext context, QScenario semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__QATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__QATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__MEASURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__MEASURE));
			if (transientValues.isValueTransient(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__MIN_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__MIN_VALUE));
			if (transientValues.isValueTransient(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__MAX_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__MAX_VALUE));
			if (transientValues.isValueTransient(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__UNIT));
			if (transientValues.isValueTransient(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__STIMULUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__STIMULUS));
			if (transientValues.isValueTransient(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__ENVIRONMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Accordant_rqPackage.Literals.QSCENARIO__ENVIRONMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQScenarioAccess().getQAttributeQAttributeEnumRuleCall_5_0(), semanticObject.getQAttribute());
		feeder.accept(grammarAccess.getQScenarioAccess().getMeasureQAMetricEnumRuleCall_8_0(), semanticObject.getMeasure());
		feeder.accept(grammarAccess.getQScenarioAccess().getMinValueEFloatParserRuleCall_11_0(), semanticObject.getMinValue());
		feeder.accept(grammarAccess.getQScenarioAccess().getMaxValueEFloatParserRuleCall_14_0(), semanticObject.getMaxValue());
		feeder.accept(grammarAccess.getQScenarioAccess().getUnitMetricUnitEnumRuleCall_17_0(), semanticObject.getUnit());
		feeder.accept(grammarAccess.getQScenarioAccess().getStimulusEStringParserRuleCall_20_0(), semanticObject.getStimulus());
		feeder.accept(grammarAccess.getQScenarioAccess().getEnvironmentEStringParserRuleCall_23_0(), semanticObject.getEnvironment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SensitivityPoint returns SensitivityPoint
	 *
	 * Constraint:
	 *     (
	 *         isRisk?='isRisk'? 
	 *         name=EString 
	 *         rationale=EString? 
	 *         code=EString? 
	 *         tactic+=[Tactic|EString] 
	 *         tactic+=[Tactic|EString]*
	 *     )
	 */
	protected void sequence_SensitivityPoint(ISerializationContext context, SensitivityPoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tactic returns Tactic
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         qAttribute=QAttribute? 
	 *         rationale=EString? 
	 *         stimulus=EString? 
	 *         response=EString? 
	 *         viewpoint=EString?
	 *     )
	 */
	protected void sequence_Tactic(ISerializationContext context, Tactic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
