/*
 * generated by Xtext 2.12.0
 */
package co.edu.uniandes.accordant_dv.scoping

import org.eclipse.emf.ecore.EReference
import co.edu.uniandes.accordant_dv.DeploymentView
import co.edu.uniandes.accordant_dv.Accordant_dvPackage

//import co.edu.uniandes.accordant_fv.FunctionalView
//import co.edu.uniandes.accordant_fv.Component
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.emf.ecore.EObject

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AdvlScopeProvider extends AbstractAdvlScopeProvider {

override getScope(EObject context, EReference reference) {
        if (context instanceof DeploymentView) {
        /*    if (reference == Accordant_dvPackage.Literals.DEPLOYMENT_VIEW__FVIMPORT) {
                val rootElement = EcoreUtil2.getContainerOfType(context, DeploymentView)
                val names = <Component>newArrayList
                val importedModule = rootElement?.fvimport
                if (importedModule !== null) {
                    for (v : importedModule.comps) {
                        names += v
                    }
                    //for (f : importedModule.funcs.map[left]) {
                    //   names += f
                    //}
                }
                // this is the unqualified variant
                // return Scopes.scopeFor(names)
                // this is the unqualified variant
                return Scopes.scopeFor(names, [QualifiedName.create(importedModule.name, it.name)], IScope.NULLSCOPE)
            }
            * 
            */
        }
        return super.getScope(context, reference);
    }

}
