// automatically generated by Xtext
grammar co.edu.uniandes.accordant_fv.Afvl with org.eclipse.xtext.common.Terminals

// generate test "http://org/xtext/accordant/FVDsl"


import "http://uniandes.accordant.functional" 
import "http://uniandes.accordant.requirement" as rq 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

FunctionalView returns FunctionalView:
	'FunctionalView'
	name=ID
	'use' 'inputPackage' ipackage=[rq::InputPackage]
	'{'
		'Components' '{' comps+=Component ( "," comps+=Component)* '}' 
		'Connectors' '{' conns+=Connector ( "," conns+=Connector)* '}' 
	'}';

Connector returns Connector:
	Stream | Adaptor | Distributor | Event | ProcedureCall;

Component returns Component:
	Transformer | Estimator | Ingestor | Sink;


EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt: 
	'-'? INT; 

Port returns Port:
	{Port} 
	'Port' name=ID ':' type=PortType?  ;

Role returns Role:
	{Role}
	'Role' name=ID ':' type=RoleType? '->' port=[Port]? ; 

enum DeliveryModel returns DeliveryModel:
				BEST_EFFORT = 'BEST_EFFORT' | AT_LEAST_ONE = 'AT_LEAST_ONE' | AT_MOST_ONE = 'AT_MOST_ONE' | EXACTLY_ONE = 'EXACTLY_ONE';

enum SyncType returns SyncType:
				ASYNC = 'ASYNC' | SYNC = 'SYNC';
				
enum PortType returns PortType:
				REQUIRED = 'REQUIRED' | PROVIDED = 'PROVIDED';
				
enum RoleType returns RoleType:
				OUT = 'OUT' | IN = 'IN';

enum NotificationModel returns NotificationModel:
				POLLED = 'POLLED' | PUBSUB = 'PUBSUB' | QUEUED = 'QUEUED' | CENTRAL = 'CENTRAL';

enum Buffering returns Buffering:
				BUFFERED = 'BUFFERED' | UNBUFFERED = 'UNBUFFERED';

enum Throughput returns Throughput:
				ATOMIC = 'ATOMIC' | HIGH_ORDER = 'HIGH_ORDER';

//ConnProps returns DeliveryModel | SyncType | NotificationModel

Stream returns Stream:
	{Stream}
	'Stream'
	name=ID
	'{'
		('delivery' ':' delivery=DeliveryModel)?
		('synct' ':' synct=SyncType)?
		('notification' ':' notification=NotificationModel)?
		('buffering' ':' buffering=Buffering)?
		('throughput' ':' throughput=Throughput)?
		//('dst' dst=[Interface|EString])? 
		//('src' src=[Interface|EString])?
		'roles' ':' '{' roles+=Role ( "," roles+=Role)* '}' 
		('sensitivityPoint' ':' spoint=[rq::SensitivityPoint])?
	'}';

Adaptor returns Adaptor:
	{Adaptor}
	'Adaptor'
	name=ID
	'{'
		('delivery' ':' delivery=DeliveryModel?) 
		('synct' ':' synct=SyncType)? 
		('notification' ':' notification=NotificationModel)? 
		('buffering' ':' buffering=Buffering)? 
		('throughput' ':' throughput=Throughput)? 
		//('dst' dst=[Interface|EString])?
		//('src' src=[Interface|EString])?
		'roles' '{' roles+=Role ( "," roles+=Role)* '}' 
		('sensitivityPoint' ':' spoint=[rq::SensitivityPoint])?
	'}';

Distributor returns Distributor:
	{Distributor}
	'Distributor'
	name=ID
	'{'
		('delivery' ':' delivery=DeliveryModel)?
		('sync' ':' synct=SyncType)?
		('notification' ':' notification=NotificationModel)?
		('buffering' ':' buffering=Buffering)?
		('throughput' ':' throughput=Throughput)?
		//('dst' dst=[Interface|EString])?
		//('src' src=[Interface|EString])?
		'roles' '{' roles+=Role ( "," roles+=Role)* '}'
		('sensitivityPoint' ':' spoint=[rq::SensitivityPoint])?
	'}';

Event returns Event:
	{Event}
	'Event'
	name=ID 
	//'(' src=[Interface] '=>' dst=[Interface] ')'
	'{'
		('delivery' ':' delivery=DeliveryModel)?
		('synct' ':' synct=SyncType)?
		('notification' ':' notification=NotificationModel)?
		('buffering' ':' buffering=Buffering)?
		('throughput' ':' throughput=Throughput)?
		//('dst' dst=[Interface|EString])?
		//('src' src=[Interface|EString])?
		'roles' ':' '{' roles+=Role ( "," roles+=Role)* '}' 
		('sensitivityPoint' ':' spoint=[rq::SensitivityPoint])?
	'}';

ProcedureCall returns ProcedureCall:
	{ProcedureCall}
	'ProcCall'
	name=ID 
	//'(' src=[Interface] '=>' dst=[Interface] ')'
	'{'
		('delivery' ':' delivery=DeliveryModel)?
		('synct' ':' synct=SyncType)?
		('notification' ':' notification=NotificationModel)?
		('buffering' ':' buffering=Buffering)?
		('throughput' ':' throughput=Throughput)?
		//('dst' dst=[Interface|EString])?
		//('src' src=[Interface|EString])?
		'roles' ':' '{' roles+=Role ( "," roles+=Role)* '}' 
		('sensitivityPoint' ':' spoint=[rq::SensitivityPoint])?
	'}';

enum ProcessingModel returns ProcessingModel:
				STREAM = 'STREAM' | BATCH = 'BATCH' | MICROBATCH = 'MICROBATCH';


Transformer returns Transformer:
	'Transformer'
	name=ID
	'{'
		('procModel' ':' procModel=ProcessingModel)?
		('pmml' ':' pmml=EString)?
		('sensitivityPoint' ':' spoint=[rq::SensitivityPoint])?
		'ports' ':' '{' ports+=Port ( "," ports+=Port)* '}' 
	'}';

Estimator returns Estimator:
	'Estimator'
	name=ID
	'{'
		('procModel' ':' procModel=ProcessingModel)?
		('pmml' ':' pmml=EString)?
		('sensitivityPoint' ':' spoint=[rq::SensitivityPoint])?
		'ports' ':' '{' ports+=Port ( "," ports+=Port)* '}' 
	'}';

Ingestor returns Ingestor:
	'Ingestor'
	name=ID
	'{'
		('procModel' ':' procModel=ProcessingModel)?
		('conn' ':' conn=EString)?
		('format' ':' format=EString)?
		('props' ':' props=EString)?
		('sensitivityPoint' ':' spoint=[rq::SensitivityPoint])?
		'ports' ':' '{' ports+=Port ( "," ports+=Port)* '}' 
	'}';

Sink returns Sink:
	'Sink'
	name=ID
	'{'
		('procModel' ':' procModel=ProcessingModel)?
		('conn' ':' conn=EString)?
		('sensitivityPoint' ':' spoint=[rq::SensitivityPoint])?
		'ports' ':' '{' ports+=Port ( "," ports+=Port)* '}'  
	'}';
