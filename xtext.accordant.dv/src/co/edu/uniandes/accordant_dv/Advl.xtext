// automatically generated by Xtext
grammar co.edu.uniandes.accordant_dv.Advl with org.eclipse.xtext.common.Terminals

//import "http://www.example.org/bdarchops_dv" 
import "http://uniandes.accordant.deployment" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://www.example.org/bdarchops_fv" as bdarchops_fv
//import "http://uniandes.accordant.functional" as fv
 
DeploymentView returns DeploymentView:
	'DeploymentView'
	name=ID
	'{'
		('devs' '{' devs+=Device ( "," devs+=Device)* '}')?
		'deployments' '{' deployments+=Deployment ( "," deployments+=Deployment)* '}'
		('services' '{' services+=Service ( "," services+=Service)* '}')?   
	'}';



EString returns ecore::EString:
	STRING | ID;

Device returns Device:
	'Device' name=ID
	'{'
		('host' ':' host=EString)?
		('type' ':' type=TypeDevice)?
		('cpu' ':' cpu=EInt)?
		('storage' ':' storage=EInt)?
		('memory' ':' mem=EInt)?	
	'}';
		
Deployment returns Deployment:
	'Deployment' name=ID
	'{'
		('replicas' ':' replicas=EInt)?
		('maxSurge' ':' maxSurge=EInt)?
		('maxUnavailable' ':' maxUnavail=EInt)?
		
		'pods' '{' pods+=Pod ( "," pods+=Pod)* '}' 
	'}';
		
Pod returns Pod:
	'Pod' name=ID
	'{'
		('host' ':' host=EString)?
		('device' ':' node=[Device])?		
		('restartPolicy' ':' restartPolicy=EString)?
		'envs' '{' envs+=ExecEnvironment ( "," envs+=ExecEnvironment)* '}' 
	'}';
	
Service returns Service:
	'Service' name=ID
	'{'
		('type' ':' type=EString)?
		('extAccess' ':' extAccess=EString)?		
		'ports' '{' ports+=ExposedPort ( "," ports+=ExposedPort)* '}' 
	'}';	

ExposedPort returns ExposedPort:
	'Port' name=ID
	'{'
		('protocol' ':' protocol=EString)?
		('target'':' target=EString)? 
		('port' ':' port=EInt)?		
		('exposes' '{' exposes+=[Pod] ( "," exposes+=[Pod])* '}')?
	'}';	


enum TypeDevice returns TypeDevice:
				MEDIUM = 'MEDIUM' | LARGE = 'LARGE'| SMALL = 'SMALL';
				
//enum Comparator returns Comparator:
//	LOWER = '<' | LWEQ = '<=' | EQUALS = '=' | DIFF = '!=' |
//	DIFF = '<>' | GREQ = '>='| GREATER = '>'
//;

//enum Unit returns Unit:
//	MILLIS = 'MILLIS' | SECONDS = 'SECONDS' | MINUTES = 'MINUTES' |  HOURS = 'HOURS'  | TASKS = 'TASKS' | BYTES = 'BYTES' | MSGS = 'MSGS'
//;

EInt returns ecore::EInt:
	'-'? INT;
 
EFloat returns ecore::EFloat:
	'-'? FLOAT;
	
terminal FLOAT:
    INT '.' INT;
	
	
ExecEnvironment returns ExecEnvironment:
	'ExecEnvironment'
	name=ID
	'{'
		('image' ':' image=EString)?
		('cpu_lim' ':' cpu_lim=EFloat)?
		('memory_lim' ':' mem_lim=EInt)?
		('cpu_req' ':' cpu_req=EFloat)?
		('mem_req' ':' mem_req=EInt)?
		('ports' '[' ports+=EInt ( "," ports+=EInt)* ']')?
		('commands''[' commands+=EString ( "," commands+=EString)* ']')?
		('artifacts' '{' artifacts+=Artifact ( "," artifacts+=Artifact)* '}')?
		('envVars' '{' vars+=EnvVar ( "," vars+=EnvVar)* '}')	?
	'}';

EnvVar returns EnvVar:
	{EnvVar}
	(name=EString':'value=EString)?;


Artifact returns Artifact:
	{Artifact}
	'Artifact'
	name=ID 
	'{'
		('comp' ':' component=EString)?
		('conn' ':' connector=EString)?
		('props' ':' props=EString)?
		//('aconn' ':' aconn=[bdarchops_fv::Connector|EString])?
		//('acomp' ':' acomp=[bdarchops_fv::Component|EString])?
//		('scenarios' '{' scenarios+=QScenario ( "," scenarios+=QScenario)* )'}'
	'}';

//QScenario returns QScenario:
//	{QScenario}
//	'QS' ':' '(' measure=QAMetric comparator=Comparator value=EFloat unit=Unit ')'
//;

//enum QAMetric returns QAMetric:
//				THROUGHPUT = 'THROUGHPUT' | LATENCY = 'LATENCY' | DEADLINE = 'DEADLINE';





