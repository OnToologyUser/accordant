/*
 * generated by Xtext 2.12.0
 */
package co.edu.uniandes.accordant_rq.scoping

import co.edu.uniandes.accordant_rq.AnalyzedQS
import co.edu.uniandes.accordant_rq.Accordant_rqPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import co.edu.uniandes.accordant_rq.QScenario

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AinlScopeProvider extends AbstractAinlScopeProvider {

	override getScope(EObject context, EReference reference) {
		if (context instanceof AnalyzedQS 
			&& (reference == Accordant_rqPackage.Literals.ANALYZED_QS__QS)) {
			// Collect a list of candidates by going through the model
			// EcoreUtil2 provides useful functionality to do that
			// For example searching for all elements within the root Object's tree
			val rootElement = EcoreUtil2.getRootContainer(context)
			// val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Interface)
			val candidates = EcoreUtil2.getAllContentsOfType(rootElement, QScenario)
			// Create IEObjectDescriptions and puts them into an IScope instance
			return Scopes.scopeFor(candidates)
		}
		return super.getScope(context, reference);
	}

}
