// automatically generated by Xtext
grammar co.edu.uniandes.accordant_rq.Ainl with org.eclipse.xtext.common.Terminals

import "http://uniandes.accordant.requirement"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

InputPackage returns InputPackage:
	{InputPackage}
	'InputPackage'
	name=ID
	'{'
		'QScenarios' '{' scenarios+=QScenario  ("," scenarios+=QScenario)* '}'
		('analyzedQScenarios' '{' analyzedQs+=AnalyzedQS  ("," analyzedQs+=AnalyzedQS)* '}')?
		('constraints' '{' constraints+=Constraint  ("," constraints+=Constraint)* '}')?
		'tactics' '{' tactics+=Tactic (',' tactics+=Tactic)* '}'
		
	'}';


EString returns ecore::EString:
	STRING | ID;

QScenario returns QScenario:
	'QS' 
	name=ID
	'{'
		'QA' ':' qAttribute=QAttribute
		'stimulus' ':' stimulus=EString
		'environment' ':' environment=EString
		'response' ':' response=EString
		'measure' ':' measure=QAMetric 'between' minValue=EFloat 'and' maxValue=EFloat 'in' unit=MetricUnit
		
	'}';

enum QAMetric returns QAMetric:
				THROUGHPUT = 'THROUGHPUT' | LATENCY = 'LATENCY' | DEADLINE = 'DEADLINE' | UPDATETIME='UPDATETIME';

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

enum MetricUnit returns MetricUnit:
				MILLIS = 'MILLIS' | SECONDS = 'SECONDS' | MINUTES = 'MINUTES' | HOURS = 'HOURS' | TASKS = 'TASKS' | BYTES = 'BYTES' | MSGS = 'MSGS';

enum QAttribute returns QAttribute:
				AVAILABILITY = 'AVAILABILITY' | PERFORMANCE = 'PERFORMANCE' | MODIFIABILITY = 'MODIFIABILITY' | TESTABILITY = 'TESTABILITY' | SCALABILITY = 'SCALABILITY';

enum ConstraintType returns ConstraintType:
				ARCH_STYLE = 'ARCH_STYLE' | CLOUD_PROV = 'CLOUD_PROV' | LICENSE = 'LICENSE' | PROC_MODEL = 'PROC_MODEL' | TECH_VENDOR = 'TECH_VENDOR';

AnalyzedQS returns AnalyzedQS:
	'AQS' 
	name=ID 'of' qs=[QScenario]
	'{'
		('reasoning' ':' reasoning=EString)?
		('Sensitivity_Points' '{' sPoints=SensitivityPoint '}' )?
	'}';

SensitivityPoint returns SensitivityPoint:
	'SensitivityPoint'
	name=ID
	'{'
		(isRisk?='isRisk')?
		('rationale' ':' rationale=EString)?
		('code' ':' code=EString)?
		'tactics' '(' appliedTactics+=[Tactic] ( "," appliedTactics+=[Tactic])* ')' 
	'}';
	
Constraint returns Constraint:
	'Constraint' 
	code=ID
	'{'
		('type' ':' type=ConstraintType '=' value=EString)?
	'}';
	
Tactic returns Tactic:
	{Tactic}
	'Tactic'
	name=ID
	'{'
		('QA' ':' qAttribute=QAttribute)?
		('rationale' ':' rationale=EString)?
		('stimulus' ':' stimulus=EString)?
		('response' ':' response=EString)?
		('viewpoint' ':' viewpoint=EString)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';
